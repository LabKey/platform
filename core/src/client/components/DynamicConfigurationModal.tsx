import React, { PureComponent } from 'react';

import { Ajax } from '@labkey/api';
import { FormButtons, Modal, ToggleIcon } from '@labkey/components';

import { SSOFields } from './SSOFields';
import { DynamicFields, TextInput } from './DynamicFields';
import { AuthConfig, AuthConfigProvider } from './models';

interface Props {
    authConfig: AuthConfig;
    canEdit: boolean;
    closeModal: () => void;
    configType: string;
    modalType: AuthConfigProvider;
    title?: string; // Used for title override in DB modal
    updateAuthRowsAfterSave?: (config: string, configType: string) => void;
}

interface State {
    emptyRequiredFields: string[];
    errorMessage: string;
    fieldValues: any;
}

export default class DynamicConfigurationModal extends PureComponent<Props, Partial<State>> {
    constructor(props) {
        super(props);

        const { authConfig, modalType } = this.props;
        const fieldValues: any = {};
        this.props.modalType.settingsFields.forEach(field => {
            const value = this.props.authConfig[field.name] != null ? this.props.authConfig[field.name] : '';
            fieldValues[field.name] = field.name in this.props.authConfig ? value : field.defaultValue;
        });

        if (modalType.sso) {
            fieldValues.auth_header_logo = '';
            fieldValues.auth_login_page_logo = '';
            fieldValues.deletedLogos = [];
            fieldValues.changedFiles = [];
        }

        this.state = {
            errorMessage: '',
            emptyRequiredFields: [],
            fieldValues: {
                // Contains form values
                enabled: authConfig.enabled,
                description: authConfig.description,
                ...fieldValues, // Contains dynamic provider-specific field data generated by server
            },
        };
    }

    saveEditedModal = (): void => {
        const { modalType, authConfig, configType, closeModal, updateAuthRowsAfterSave } = this.props;

        if (this.areRequiredFieldsEmpty()) {
            return;
        }

        const form = new FormData();

        if (authConfig.configuration) {
            form.append('configuration', authConfig.configuration.toString());
        }

        Object.keys(this.state.fieldValues).map(item => {
            const itemValue = this.state.fieldValues[item];
            if (itemValue !== null && itemValue !== '' && (typeof itemValue !== 'string' || itemValue.trim() !== '')) {
                form.append(item, itemValue);
            }
        });

        Ajax.request({
            url: modalType.saveLink,
            method: 'POST',
            form,
            scope: this,
            failure: function (error) {
                const errorObj = JSON.parse(error.response);
                const errorMessage = errorObj.exception;
                this.setState(() => ({ errorMessage }));
            },
            success: function (result) {
                updateAuthRowsAfterSave(result.response, configType);
                closeModal();
            },
        });
    };

    areRequiredFieldsEmpty = (): boolean => {
        // Issue 50964: Save incomplete disabled authentication configurations
        if (!this.state.fieldValues.enabled) {
            return false;
        }

        // Array of all required fields
        const requiredFields = this.props.modalType.settingsFields.reduce((accum, current) => {
            if (current.required) {
                accum.push(current.name);
            }
            return accum;
        }, []);

        const emptyRequiredFields = requiredFields.filter(name => this.state.fieldValues[name] == '');
        if (emptyRequiredFields.length > 0) {
            this.setState({ emptyRequiredFields });
            return true;
        } else {
            return false;
        }
    };

    onToggle = (): void => {
        this.setState(state => ({
            ...state,
            fieldValues: { ...state.fieldValues, enabled: !state.fieldValues.enabled },
        }));
    };

    onChange = (name: string, value: string | boolean): void => {
        this.setState(state => ({
            ...state,
            fieldValues: { ...state.fieldValues, [name]: value },
        }));
    };

    handleDeleteLogo = (value: string): void => {
        this.setState(state => ({
            ...state,
            fieldValues: { ...state.fieldValues, deletedLogos: [...state.fieldValues.deletedLogos, value] },
        }));
    };

    onFileChange = (attachment, logoType: string): void => {
        this.setState(state => ({
            ...state,
            fieldValues: { ...state.fieldValues, [logoType]: attachment.first() },
        }));
    };

    onFileRemoval = (name: string): void => {
        const changedFiles = this.state.fieldValues.changedFiles;
        if (changedFiles.indexOf(name) === -1) {
            this.setState(state => ({
                ...state,
                fieldValues: { ...state.fieldValues, changedFiles: [...state.fieldValues.changedFiles, name] },
            }));
        }
        this.setState(state => ({
            ...state,
            fieldValues: { ...state.fieldValues, [name]: '' },
        }));
    };

    render() {
        const { modalType, closeModal, canEdit, title, authConfig } = this.props;
        const { emptyRequiredFields, errorMessage, fieldValues } = this.state;
        let queryString;
        if (fieldValues.servers) {
            queryString = {
                server: fieldValues.servers,
                principal: fieldValues.principalTemplate,
                sasl: fieldValues.sasl,
                readAttributes: fieldValues.readAttributes,
                attributeSearchBase: fieldValues.attributeSearchBase,
                attributeFilterTemplate: fieldValues.attributeFilterTemplate,
            };
        }

        const isAddNewConfig = title;
        const modalTitle = isAddNewConfig ? 'Add ' + title : 'Configure ' + authConfig.description;
        const finalizeButtonText = isAddNewConfig ? 'Finish' : 'Apply';
        const requiredFieldEmpty = emptyRequiredFields.indexOf('description') !== -1;
        const footer = (
            <FormButtons sticky={false}>
                <button className="labkey-button modal__save-button" onClick={closeModal} type="button">
                    {canEdit ? 'Cancel' : 'Close'}
                </button>

                <a target="_blank" href={modalType.helpLink} className="modal__help-link" rel="noopener noreferrer">
                    {`More about ${authConfig.provider} authentication`}
                </a>

                {canEdit ? (
                    <button className="labkey-button primary" onClick={this.saveEditedModal} type="button">
                        {finalizeButtonText}
                    </button>
                ) : null}
            </FormButtons>
        );

        return (
            <Modal footer={footer} onCancel={closeModal} title={modalTitle}>
                <div className="modal__top">
                    <span className="bold-text"> Configuration Status </span>
                    <div className="modal__enable-toggle">
                        Enabled:&nbsp;
                        <ToggleIcon active={fieldValues.enabled ? 'on' : 'off'} onClick={this.onToggle} />
                    </div>
                </div>

                {authConfig.provider !== 'SAML' && (
                    <>
                        <div className="bold-text modal__settings-text"> Settings</div>

                        <TextInput
                            onChange={this.onChange}
                            value={fieldValues.description}
                            type="text"
                            canEdit={canEdit}
                            requiredFieldEmpty={requiredFieldEmpty}
                            required={true}
                            name="description"
                            caption="Name/Description"
                        />
                    </>
                )}

                <DynamicFields
                    fields={modalType.settingsFields}
                    fieldValues={fieldValues}
                    canEdit={canEdit}
                    emptyRequiredFields={emptyRequiredFields}
                    modalType={modalType}
                    authConfig={authConfig}
                    onChange={this.onChange}
                    onFileChange={this.onFileChange}
                    onFileRemoval={this.onFileRemoval}
                />

                {modalType.sso && (
                    <SSOFields
                        headerLogoUrl={authConfig.headerLogoUrl}
                        loginLogoUrl={authConfig.loginLogoUrl}
                        onFileChange={this.onFileChange}
                        handleDeleteLogo={this.handleDeleteLogo}
                        canEdit={canEdit}
                    />
                )}

                {modalType.testLink && (
                    <div className="modal__test-button">
                        <button
                            className="labkey-button"
                            onClick={() => {
                                const testLinkUrl = new URL(modalType.testLink, window.location.origin);
                                if (queryString) {
                                    testLinkUrl.search = new URLSearchParams(queryString).toString();
                                }
                                window.open(testLinkUrl.href);
                            }}
                        >
                            Test
                        </button>
                    </div>
                )}

                <div className="modal__error-message"> {errorMessage} </div>
            </Modal>
        );
    }
}
