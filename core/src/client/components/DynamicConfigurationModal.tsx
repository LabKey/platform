import React, { PureComponent } from 'react';
import { Button, Modal } from 'react-bootstrap';
import ReactBootstrapToggle from 'react-bootstrap-toggle';

import { ActionURL, Ajax } from '@labkey/api';

import { SSOFields } from './SSOFields';
import { DynamicFields, TextInput} from './DynamicFields';
import { AuthConfig, AuthConfigProvider } from "./models";

interface Props {
    authConfig: AuthConfig;
    modalType: AuthConfigProvider;
    configType: string;
    canEdit: boolean;
    title?: string; // Used for title override in DB modal
    updateAuthRowsAfterSave: Function;
    closeModal: Function;
}

interface State {
    errorMessage: string;
    emptyRequiredFields: string[];
    fieldValues: any;
}

export default class DynamicConfigurationModal extends PureComponent<Props, Partial<State>> {
    constructor(props) {
        super(props);

        const {authConfig, modalType} = this.props;
        const fieldValues: any = {};
        this.props.modalType.settingsFields.forEach(field => {
            fieldValues[field.name] = field.name in this.props.authConfig ? this.props.authConfig[field.name] : field.defaultValue;
        });

        if (modalType.sso) {
            fieldValues.auth_header_logo = '';
            fieldValues.auth_login_page_logo = '';
            fieldValues.deletedLogos = [];
            fieldValues.changedFiles = [];
        }

        this.state = {
            errorMessage: '',
            emptyRequiredFields: [],
            fieldValues: { // Contains form values
                enabled: authConfig.enabled,
                description: authConfig.description,
                ...fieldValues // Contains dynamic provider-specific field data generated by server
            }
        };
    }

    saveEditedModal = (): void => {
        const {modalType, authConfig, configType, closeModal, updateAuthRowsAfterSave} = this.props;

        const baseUrl = ActionURL.getBaseURL(true);
        const saveUrl = baseUrl + modalType.saveLink;
        let form = new FormData();

        if (this.areRequiredFieldsEmpty()) {
            return;
        }

        if (authConfig.configuration) {
            form.append('configuration', authConfig.configuration.toString());
        }

        Object.keys(this.state.fieldValues).map(item => {
            form.append(item, this.state.fieldValues[item]);
        });

        Ajax.request({
            url: saveUrl,
            method: 'POST',
            form,
            scope: this,
            failure: function(error) {
                const errorObj = JSON.parse(error.response);
                const errorMessage = errorObj.exception;
                this.setState(() => ({ errorMessage }));
            },
            success: function(result) {
                updateAuthRowsAfterSave(result.response, configType);
                closeModal();
            },
        });
    };

    areRequiredFieldsEmpty = () => {
        // Array of all required fields
        const requiredFields = this.props.modalType.settingsFields.reduce(
            (accum, current) => {
                if (current.required) {
                    accum.push(current.name);
                }
                return accum;
            },
            []
        );

        const emptyRequiredFields = requiredFields.filter(name => (this.state.fieldValues[name] == ''));
        if (emptyRequiredFields.length > 0) {
            this.setState({ emptyRequiredFields });
            return true;
        } else {
            return false;
        }
    };

    onToggle = () => {
        this.setState(state => ({
            ...state,
            fieldValues:{ ...state.fieldValues, enabled: !state.fieldValues.enabled }
        }));
    };

    onChange = (event)  => {
        const { name, value } = event.target;
        this.setState((state) => ({
            ...state,
            fieldValues: {...state.fieldValues, [name]: value}
        }));
    };

    handleDeleteLogo = (value: string) => {
        this.setState(state => ({
            ...state,
            fieldValues:{ ...state.fieldValues, deletedLogos: [ ...state.fieldValues.deletedLogos, value] }
        }));
    };

    checkCheckBox = (name: string) => {
        this.setState((state) => ({
            ...state,
            fieldValues: {...state.fieldValues, [name]: !state.fieldValues[name]}
        }));
    };

    onFileChange = (attachment, logoType: string) => {
        this.setState((state) => ({
            ...state,
            fieldValues: {...state.fieldValues, [logoType]: attachment.first()}
        }));
    };

    onFileRemoval = (name: string) => {
        const changedFiles = this.state.fieldValues.changedFiles;
        if (changedFiles.indexOf(name) === -1) {
            this.setState((state) => ({
                ...state,
                fieldValues: {...state.fieldValues, changedFiles: [...state.fieldValues.changedFiles, name]}
            }));
        }
        this.setState((state) => ({
            ...state,
            fieldValues: {...state.fieldValues, [name]: '' }
        }));
    };

    render() {
        const { modalType, closeModal, canEdit, title, authConfig } = this.props;
        const { emptyRequiredFields, errorMessage, fieldValues } = this.state;
        let queryString;
        if (fieldValues.servers) {
            queryString = {
                server: fieldValues.servers,
                principal: fieldValues.principalTemplate,
                sasl: fieldValues.SASL,
            };
        }

        const isAddNewConfig = title;
        const modalTitle = isAddNewConfig ? 'Add ' + title : 'Configure ' + authConfig.description;
        const finalizeButtonText = isAddNewConfig ? 'Finish' : 'Apply';
        const requiredFieldEmpty = emptyRequiredFields.indexOf("description") !== -1;

        return (
            <Modal show={true} onHide={closeModal}>
                <Modal.Header closeButton>
                    <Modal.Title>
                        {modalTitle}
                    </Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <div className="modal__top">
                        <span className="bold-text"> Configuration Status </span>
                        <ReactBootstrapToggle
                            onClick={this.onToggle}
                            on="Enabled"
                            off="Disabled"
                            onstyle="primary"
                            active={fieldValues.enabled}
                            className="modal__enable-toggle"
                            disabled={!canEdit}
                        />
                    </div>

                    <div className="bold-text modal__settings-text"> Settings </div>

                    <TextInput
                        onChange={this.onChange}
                        value={fieldValues.description}
                        type="text"
                        canEdit={canEdit}
                        requiredFieldEmpty={requiredFieldEmpty}
                        required={true}
                        name="description"
                        caption="Description"
                    />

                    <DynamicFields
                        fields={modalType.settingsFields}
                        fieldValues={fieldValues}
                        canEdit={canEdit}
                        emptyRequiredFields={emptyRequiredFields}
                        modalType={modalType}
                        onChange={this.onChange}
                        checkCheckBox={this.checkCheckBox}
                        onFileChange={this.onFileChange}
                        onFileRemoval={this.onFileRemoval}
                    />

                    {modalType.sso &&
                        <SSOFields
                            headerLogoUrl={authConfig.headerLogoUrl}
                            loginLogoUrl={authConfig.loginLogoUrl}
                            onFileChange={this.onFileChange}
                            handleDeleteLogo={this.handleDeleteLogo}
                            canEdit={canEdit}
                        />
                    }

                    {modalType.testLink && (
                        <div className="modal__test-button">
                            <Button
                                className="labkey-button"
                                onClick={() =>
                                    window.open(
                                        ActionURL.getBaseURL(true) +
                                        modalType.testLink +
                                        ActionURL.queryString(queryString)
                                    )
                                }
                            >
                                Test
                            </Button>
                        </div>
                    )}

                    <div className="modal__error-message"> {errorMessage} </div>

                    <div className="modal__bottom">
                        <div className="modal__bottom-buttons">
                            <a target="_blank" href={modalType.helpLink} className="modal__help-link" rel="noopener noreferrer">
                                {`More about ${authConfig.provider} authentication`}
                            </a>

                            {canEdit ? (
                                <Button className="labkey-button primary" onClick={() => this.saveEditedModal()}>
                                    {finalizeButtonText}
                                </Button>
                            ) : null}
                        </div>

                        <Button className="labkey-button modal__save-button" onClick={closeModal}>
                            {canEdit ? 'Cancel' : 'Close'}
                        </Button>
                    </div>
                </Modal.Body>
            </Modal>
        );
    }
}
