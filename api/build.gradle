import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.ExternalDependency

plugins {
    id 'java-library'
    id 'org.labkey.build.javaModule'
    id 'org.labkey.build.xmlBeans'
}

List spring = [
        "org.springframework:spring-beans:${springVersion}",
        "org.springframework:spring-context:${springVersion}",
        "org.springframework:spring-core:${springVersion}",
        "org.springframework:spring-jdbc:${springVersion}",
        "org.springframework:spring-test:${springVersion}",
        "org.springframework:spring-tx:${springVersion}",
        "org.springframework:spring-web:${springVersion}",
        "org.springframework:spring-webmvc:${springVersion}"
]

List apache = [
        "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}",
        "commons-codec:commons-codec:${commonsCodecVersion}",
        "org.apache.commons:commons-collections4:${commonsCollections4Version}",
        "commons-dbcp:commons-dbcp:${commonsDbcpVersion}",
        "commons-io:commons-io:${commonsIoVersion}",
        "org.apache.commons:commons-lang3:${commonsLang3Version}",
        "commons-pool:commons-pool:${commonsPoolVersion}",
        "commons-validator:commons-validator:${commonsValidatorVersion}",
        "org.apache.httpcomponents:httpclient:${httpclientVersion}",
        "org.apache.httpcomponents:httpcore:${httpcoreVersion}",
        "org.apache.poi:poi:${poiVersion}",
        "org.apache.poi:poi-ooxml:${poiVersion}",
        "org.apache.xmlbeans:xmlbeans:${xmlbeansVersion}",
        "org.apache.pdfbox:pdfbox:${pdfboxVersion}"
]


List gwt = [
        "com.google.gwt:gwt-servlet:${gwtServletVersion}"
]

List jackson = [
        "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}",
        "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
        "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
        // added because otherwise we get this error: Java 8 date/time type `java.time.LocalDate` not supported by default
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
//        "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}" // included separately below so we can exclude the json jar it brings in
]

List charting = [
        "org.jfree:jfreechart:${jfreechartVersion}"
]

List caching = [
        "net.sf.ehcache:ehcache-core:${ehcacheCoreVersion}"
]

List logging = [
        "org.apache.logging.log4j:log4j-core:${log4j2Version}",
        "org.apache.logging.log4j:log4j-api:${log4j2Version}",
        "commons-logging:commons-logging:${commonsLoggingVersion}"
]

List r = [
        "net.rforge:rengine:${rforgeVersion}",
        "net.rforge:rserve:${rforgeVersion}"
]

List test = [
        "org.jmock:jmock:${jmockVersion}",
        "org.jmock:jmock-legacy:${jmockVersion}",
        "junit:junit:${junitVersion}"
]

List others = [
        "gov.nist.math:jama:${jamaVersion}",
        "org.jetbrains:annotations:${annotationsVersion}",
        "org.apache.xmlgraphics:batik-codec:${batikVersion}",
        "org.apache.xmlgraphics:batik-transcoder:${batikVersion}",
        "org.apache.xmlgraphics:fop:${fopVersion}",
        "flyingsaucer:core-renderer:${flyingsaucerVersion}",
        "com.google.guava:guava:${guavaVersion}",
        "net.sf.jtidy:jtidy:${jtidyVersion}",
        "org.quartz-scheduler:quartz:${quartzVersion}",
        "net.coobird:thumbnailator:${thumbnailatorVersion}",
        "org.apache.tika:tika-core:${tikaVersion}",
        "cglib:cglib-nodep:${cglibNodepVersion}",
        "xerces:xercesImpl:${xercesImplVersion}",
        "org.imca_cat.pollingwatchservice:pollingwatchservice:${pollingWatchVersion}",
        "org.postgresql:postgresql:${postgresqlDriverVersion}",
        "org.hamcrest:hamcrest-core:${hamcrestVersion}"
]

List javax = [
        "javax.validation:validation-api:${validationApiVersion}",
]

List runtime = [
    "com.google.code.kaptcha:kaptcha:${kaptchaVersion}",
]

configurations {
    // Exclude the bundled org.json library from com.fasterxml.jackson.datatype:jackson-datatype-json-org dependency
    // and the org.json module as well because they get in the way of our own JSON object implementations from server/api
    all*.exclude group: "org.apache.geronimo.bundles", module: "json"
    all*.exclude group: "org.json", module: "json"

    creditable {
        canBeConsumed = false
        canBeResolved = true
    }

    // this configuration and its artifact are declared because the default outgoing variant for the api
    // module (runtimeElements) does not include all the class files since the classes compiled from
    // the XSDs are produced in a separate classes directory.  The name is chosen to be the same as
    // the apiJarFile configuration that comes from the API Gradle plugin.  We need this jar file for
    // the testAutomation dependency declaration at least.
    apiJarFile {
        canBeConsumed = true
        canBeResolved = true
    }
}

// declared separately to include the gwtsrc directory
sourceSets {
  main {
    java {
      srcDirs = ["src", "gwtsrc", "$project.buildDir/xb"]
    }
    // TODO move resources files into resources directory to avoid this overlap
    resources {
      srcDirs = ['src'] // src is included because it contains some xml and text files
      exclude '**/*.java'
      exclude '**/*.jsp'
    }
  }
}


dependencies {
    // declare a transitive labkey dependency so the dependencies of the labkey-client-api are copied into api's lib directory
    // and so the dependencies are included in the dependencies.txt file.
    BuildUtils.addLabKeyDependency(project: project, config: "labkey", depProjectPath: BuildUtils.getRemoteApiProjectPath(gradle), transitive: true, depProjectConfig: "default", depVersion: project.labkeyClientApiVersion)
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getBootstrapProjectPath(gradle))
    api project.tasks.schemasCompile.outputs.files

    api "org.apache.tomcat:tomcat-jasper:${apacheTomcatVersion}"
    api "org.apache.tomcat:tomcat-websocket-api:${apacheTomcatVersion}"
    api "org.apache.tomcat:tomcat-jsp-api:${apacheTomcatVersion}"
    // always include labkey-client-api in the dependencies.txt file, whether that project is being built locally or not.
    creditable "org.labkey.api:labkey-client-api:${project.labkeyClientApiVersion}"
    creditable runtime
    runtimeOnly runtime

    BuildUtils.addTomcatBuildDependencies(project, "implementation")
    // the following two libraries are required for compilation but we don't want extra ones in the classpath, so we exclude
    // them from external dependencies in favor of the versions in the tomcat directory (FIXME seems somewhat sketchy...)
    api "javax.servlet:servlet-api:${servletApiVersion}"
    api "com.sun.mail:jakarta.mail:${javaMailVersion}"

    // These are required for running unit tests through the server junit controller
//    external test

//// SPRING
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-beans:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "spring-webmvc.jar dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-context:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "spring-webmvc.jar dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-core:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "spring-webmvc.jar dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-jdbc:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "SQL exceptions and errors",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-test:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Object instantiation framework",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-tx:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "DAO and transactions",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-web:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Basis of web framework",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.springframework:spring-webmvc:${springVersion}",
            "Spring Framework",
            "Spring",
            "http://www.springframework.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "spring-webmvc.jar dependency",
        )
    )

//// APACHE
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}",
            "Commons Beanutils",
            "Apache",
            "http://jakarta.apache.org/commons/beanutils/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Reading/writing beans",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-codec:commons-codec:${commonsCodecVersion}",
            "Commons Codec",
            "Apache",
            "http://jakarta.apache.org/commons/codec/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Provides implementations of common encoders and decoders such as Base64, Hex, Phonetic and URLs",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.commons:commons-collections4:${commonsCollections4Version}",
            "Commons Collections",
            "Apache",
            "https://commons.apache.org/proper/commons-collections/index.html",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Helpful collections",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-dbcp:commons-dbcp:${commonsDbcpVersion}",
            "Commons Database Connection Pool",
            "Apache",
            "http://commons.apache.org/proper/commons-dbcp/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Database connection pooling - Mondrian and TargetedMS dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-io:commons-io:${commonsIoVersion}",
            "Commons I/O",
            "Apache",
            "http://jakarta.apache.org/commons/io/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "I/O utility classes",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.commons:commons-lang3:${commonsLang3Version}",
            "Commons Lang",
            "Apache",
            "http://jakarta.apache.org/commons/lang/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Language helpers",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-pool:commons-pool:${commonsPoolVersion}",
            "Commons Pool",
            "Apache",
            "http://commons.apache.org/pool/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Object pooling - Pipeline & TargetedMS dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-validator:commons-validator:${commonsValidatorVersion}",
            "Commons Validator",
            "Apache",
            "http://jakarta.apache.org/commons/validator/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Data validation and error messages",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.httpcomponents:httpclient:${httpclientVersion}",
            "Apache HTTP Client",
            "Apache",
            "http://hc.apache.org/httpcomponents-client-ga",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "HTTP client for requests of remote servers",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.httpcomponents:httpcore:${httpcoreVersion}",
            "Apache HTTP Core",
            "Apache",
            "http://hc.apache.org/httpcomponents-core-ga/index.html",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "HTTP core library, HttpClient dependency",
        )
    )


    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.poi:poi:${poiVersion}",
            "Apache POI",
            "Apache",
            "https://poi.apache.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Extracting text from and exporting to Microsoft document formats (Excel, Word, PowerPoint, etc.)",
        )
    )


    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.pdfbox:pdfbox:${pdfboxVersion}",
            "Apache PDFBox®",
            "PDFBox",
            "https://pdfbox.apache.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Extract text and produce thumbnails from PDFs",
        )
    )


    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}",
            "Jackson support for org.json",
            "Jackson",
            "https://github.com/FasterXML/jackson-datatype-json-org",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Jackson support for org.json data types, to ease migration out of code that uses them",
        ),
        {
            // exclude this because it gets in the way of our own JSON object implementations from server/api
            exclude group: "org.json", module:"json"
        }
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.poi:poi-ooxml:${poiVersion}",
            "Apache POI OOXML",
            "Apache",
            "https://poi.apache.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "POI support for OOXML formats",
        ),
        {
            // Issue 33146: Later versions of xmlbeans introduce some encoding problems, so we exclude the transitive
            // dependency here in favor of the explicit dependency with a different version.
            exclude group: "org.apache.xmlbeans", module: "xmlbeans"
        }
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.sourceforge.jexcelapi:jxl:${jxlVersion}",
            "API",
            "jexcelapi",
            "http://www.jexcelapi.org/",
            ExternalDependency.LGPL_LICENSE_NAME,
            "http://www.opensource.org/licenses/lgpl-license.php",
            "Java Excel library",
        ),
        {
            // exclude this because it brings older version of log4j
            exclude group: "log4j", module:"log4j"
        }
    )

//gwt
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.gwt:gwt-servlet:${gwtServletVersion}",
            "Server Support for Google Web Toolkit",
            "Google",
            "http://code.google.com/webtoolkit/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Support for rich web apps",
        )
    )

//jackson
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}",
            "Jackson Annotations Library",
            "Jackson",
            "https://github.com/FasterXML/jackson",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "JSON de/serialization, reporting API dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "Jackson Core Library",
            "Jackson",
            "https://github.com/FasterXML/jackson",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "JSON de/serialization, reporting API dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "Jackson Databind Library",
            "Jackson",
            "https://github.com/FasterXML/jackson",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "JSON de/serialization, reporting API dependency",
        )
    )

// added because otherwise we get this error: Java 8 date/time type `java.time.LocalDate` not supported by default
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
            "Jackson support for org.json",
            "Jackson",
            "https://github.com/FasterXML/jackson-datatype-json-org",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Add-on module to support JSR-310 (Java 8 Date & Time API) data types",
        )
    )

//charting
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.jfree:jfreechart:${jfreechartVersion}",
            "JFreeChart",
            "JFreeChart",
            "http://www.jfree.org/jfreechart/",
            ExternalDependency.LGPL_LICENSE_NAME,
            ExternalDependency.LGPL_LICENSE_URL,
            "Charting",
        )
    )

//caching
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.sf.ehcache:ehcache-core:${ehcacheCoreVersion}",
            "Ehcache",
            "Terracotta",
            "http://ehcache.org/documentation/overview.html",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Caching library",
        )
    )

//logging
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.logging.log4j:log4j-core:${log4j2Version}",
            "Log4j",
            "Apache",
            "https://logging.apache.org/log4j/2.x/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Logging",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.logging.log4j:log4j-api:${log4j2Version}",
            "Log4j",
            "Apache",
            "https://logging.apache.org/log4j/2.x/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Logging",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "commons-logging:commons-logging:${commonsLoggingVersion}",
            "Commons Logging",
            "Apache",
            "http://jakarta.apache.org/commons/logging/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Bridge API to different logging implementations",
        )
    )

//r
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.rforge:rengine:${rforgeVersion}",
            "Rengine",
            "Rserve",
            "http://www.rforge.net/Rserve",
            ExternalDependency.LGPL_LICENSE_NAME,
            "http://www.gnu.org/licenses/lgpl.html",
            "R client classes",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.rforge:rserve:${rforgeVersion}",
            "Rserve",
            "Rserve",
            "http://www.rforge.net/Rserve",
            ExternalDependency.LGPL_LICENSE_NAME,
            "http://www.gnu.org/licenses/lgpl.html",
            "Library to connect to an R Server",
        )
    )

//test
// These are required for running unit tests through the server junit controller
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.jmock:jmock:${jmockVersion}",
            "jMock",
            "jMock",
            "http://www.jmock.org/",
            "jMock Project License",
            "http://www.jmock.org/license.html",
            "jMock mock object testing framework",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.jmock:jmock-legacy:${jmockVersion}",
            "jMock",
            "jMock",
            "http://www.jmock.org/",
            "jMock Project License",
            "http://www.jmock.org/license.html",
            "jMock mock object testing framework",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "junit:junit:${junitVersion}",
            "JUnit",
            "Junit",
            "http://www.junit.org",
            "CPL 1.0",
            "http://www.opensource.org/licenses/cpl1.0.php",
            "Unit testing",
        )
    )

//others
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "gov.nist.math:jama:${jamaVersion}",
            "Java Matrix Package",
            "MathWorks & NIST",
            "http://math.nist.gov/javanumerics/jama/",
            "Public Domain",
            "https://math.nist.gov/javanumerics/jama/#license",
            "Linear regressions for hydrophobicity",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.jetbrains:annotations:${annotationsVersion}",
            "Compiler annotations",
            "JetBrains",
            "http://www.jetbrains.com/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Annotations to enable compile-time checking for null",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.xmlgraphics:batik-codec:${batikVersion}",
            "Apache Batik Codec",
            "Apache",
            "http://xmlgraphics.apache.org/batik/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "FOP dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.xmlgraphics:batik-transcoder:${batikVersion}",
            "Apache Batik Transcoder",
            "Apache",
            "http://xmlgraphics.apache.org/batik/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "FOP dependency",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.xmlgraphics:fop:${fopVersion}",
            "Formatting Objects Processor (FOP)",
            "Apache",
            "http://xmlgraphics.apache.org/fop/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Used to export SVG visualizations to image and PDF formats",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "flyingsaucer:core-renderer:${flyingsaucerVersion}",
            "FlyingSaucer",
            "FlyingSaucer",
            "http://code.google.com/p/flying-saucer/",
            ExternalDependency.LGPL_LICENSE_NAME,
            ExternalDependency.LGPL_LICENSE_URL,
            "XHTML/CSS rendering library",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.guava:guava:${guavaVersion}",
            "Guava: Google Core Libraries for Java",
            "guava-libraries",
            "http://code.google.com/p/guava-libraries/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Collections Library",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.sf.jtidy:jtidy:${jtidyVersion}",
            "Java Tidy",
            "SourceForge",
            "http://jtidy.sourceforge.net/",
            "Custom",
            "http://www.labkey.org/download/jtidy-LICENSE.txt",
            "Validating HTML content",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.quartz-scheduler:quartz:${quartzVersion}",
            "quartz",
            "quartz",
            "http://quartz-scheduler.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Scheduling",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.coobird:thumbnailator:${thumbnailatorVersion}",
            "Thumbnailator",
            "thumbnailator",
            "https://github.com/coobird/thumbnailator",
            ExternalDependency.MIT_LICENSE_NAME,
            "http://www.opensource.org/licenses/mit-license.html",
            "Thumbnail generator",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.xmlbeans:xmlbeans:${xmlbeansVersion}",
            "XMLBeans",
            "Apache",
            "http://xmlbeans.apache.org/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Reading/writing XML",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.tika:tika-core:${tikaVersion}",
            "Tika",
            "Apache",
            "http://lucene.apache.org/tika/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Just detection of file content types and extraction of text (no parsers)",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "cglib:cglib-nodep:${cglibNodepVersion}",
            "Code Generation Library",
            "SourceForge",
            "http://sourceforge.net/projects/cglib/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Used by Spring Framework and jMock",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "xerces:xercesImpl:${xercesImplVersion}",
            "Xerces",
            "Apache",
            "http://xerces.apache.org/xerces2-j/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "dependents: flow module, batik library",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.imca_cat.pollingwatchservice:pollingwatchservice:${pollingWatchVersion}",
            "Polling Watch Service",
            "imca",
            "https://www.imca.aps.anl.gov/~jlmuir/sw/pollingwatchservice.html",
            "BSD 2-Clause license",
            "https://www.imca.aps.anl.gov/~jlmuir/repo/bsd-2-clause-license.txt",
            "Provide polling file watcher for cifs file systems",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.postgresql:postgresql:${postgresqlDriverVersion}",
            "PostgreSQL JDBC Driver",
            "jdbc.postgresql.org",
            "http://jdbc.postgresql.org/index.html",
            ExternalDependency.BSD_LICENSE_NAME,
            "https://jdbc.postgresql.org/about/license.html",
            "Connect with PostgreSQL database servers",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.hamcrest:hamcrest-core:${hamcrestVersion}",
            "Hamcrest",
            "Java Hamcrest",
            "http://hamcrest.org/JavaHamcrest/",
            "New BSD License",
            ExternalDependency.BSD_LICENSE_URL,
            "Library for writing declartive matches for testing",
        )
    )

//javax
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "javax.validation:validation-api:${validationApiVersion}",
            "Bean Validation API (JSR 303)",
            "JCP",
            "http://jcp.org/en/jsr/detail?id=303",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Validation of objects, requirement of GWT",
        )
    )

//runtime
    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.code.kaptcha:kaptcha:${kaptchaVersion}",
            "Captcha generator",
            "kaptcha",
            "http://code.google.com/p/kaptcha/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "User signup forms",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.httpcomponents:httpmime:${httpmimeVersion}",
            "Apache HTTP Mime",
            "Apache",
            "http://hc.apache.org/httpcomponents-client-ga",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "HTTP client for requests of remote servers",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.googlecode.json-simple:json-simple:${jsonSimpleVersion}",
            "JSON.simple - A Simple Java toolkit for JSON",
            "JSON.simple",
            "https://code.google.com/p/json-simple/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "JSON parser for remoteapi",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "net.sf.opencsv:opencsv:${opencsvVersion}",
            "OpenCSV",
            "OpenCSV",
            "http://opencsv.sourceforge.net/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Parsing CSV files",
        )
    )

    jspImplementation files(project.tasks.jar)
    jspImplementation apache, jackson, spring
}

artifacts {
    apiJarFile(jar)
}
