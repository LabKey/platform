import org.labkey.gradle.util.BuildUtils

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.labkey.javaModule'
apply plugin: 'org.labkey.xmlBeans'

List spring = [
        "org.springframework:spring-aop:${springVersion}",
        "org.springframework:spring-beans:${springVersion}",
        "org.springframework:spring-context:${springVersion}",
        "org.springframework:spring-core:${springVersion}",
        "org.springframework:spring-expression:${springVersion}",
        "org.springframework:spring-jdbc:${springVersion}",
        "org.springframework:spring-test:${springVersion}",
        "org.springframework:spring-tx:${springVersion}",
        "org.springframework:spring-web:${springVersion}",
        "org.springframework:spring-webmvc:${springVersion}"
]

List apache = [
        "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}",
        "commons-codec:commons-codec:${commonsCodecVersion}",
        "org.apache.commons:commons-collections4:${commonsCollections4Version}",
        "commons-dbcp:commons-dbcp:${commonsDbcpVersion}",
        "commons-digester:commons-digester:${commonsDigesterVersion}",
        "commons-discovery:commons-discovery:${commonsDiscoveryVersion}",
        "commons-fileupload:commons-fileupload:${commonsFileuploadVersion}",
        "commons-io:commons-io:${commonsIoVersion}",
        "org.apache.commons:commons-compress:${commonsCompressVersion}",
        "org.tukaani:xz:${tukaaniXZVersion}",         // Transitive dependency of commons-compress -- Issue 38298: Errors when indexing .7z files in search
        "org.apache.commons:commons-lang3:${commonsLang3Version}",
        "org.apache.commons:commons-math3:${commonsMath3Version}",
        "commons-net:commons-net:${commonsNetVersion}",
        "commons-pool:commons-pool:${commonsPoolVersion}",
        "commons-validator:commons-validator:${commonsValidatorVersion}",
        "org.apache.httpcomponents:httpclient:${httpclientVersion}",
        "org.apache.httpcomponents:httpcore:${httpcoreVersion}",
        "org.apache.poi:poi:${poiVersion}",
//        "org.apache.poi:poi-ooxml:${poiVersion}", // included separately below so we can exclude the newer version of xmlbeans that is buggy wrt line endings
        "org.apache.pdfbox:pdfbox:${pdfboxVersion}"
]


List gwt = [
        "com.google.gwt:gwt-servlet:${gwtServletVersion}"
]

List jackson = [
        "com.fasterxml.jackson.core:jackson-annotations:${jacksonAnnotationsVersion}",
        "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
        "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
//        "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}" // included separately below so we can exclude the json jar it brings in
]

List charting = [
        "org.jfree:jfreechart:${jfreechartVersion}"
]

List caching = [
        "net.sf.ehcache:ehcache-core:${ehcacheCoreVersion}"
]

// TODO : log4j - change it to use log4j2version before final merge
List logging = [
        "org.apache.logging.log4j:log4j-core:2.13.3",
        "org.apache.logging.log4j:log4j-api:2.13.3",
//        "org.apache.logging.log4j:log4j-1.2-api:2.13.3"
]

List r = [
        "net.rforge:rengine:${rforgeVersion}",
        "net.rforge:rserve:${rforgeVersion}"
]

List test = [
        "org.jmock:jmock:${jmockVersion}",
        "org.jmock:jmock-legacy:${jmockVersion}",
        "junit:junit:${junitVersion}"
]

List others = [
        "gov.nist.math:jama:${jamaVersion}",
        "org.jetbrains:annotations:${annotationsVersion}",
        "org.apache.xmlgraphics:batik-codec:${batikVersion}",
        "org.apache.xmlgraphics:fop:${fopVersion}",
        "flyingsaucer:core-renderer:${flyingsaucerVersion}",
        "com.google.guava:guava:${guavaVersion}",
        "net.sf.jtidy:jtidy:${jtidyVersion}",
        "com.google.code.kaptcha:kaptcha:${kaptchaVersion}",
        "org.objenesis:objenesis:${objenesisVersion}",
        "com.opencsv:opencsv:${opencsvVersion}",
        "org.ardverk:patricia-trie:${patriciaTrieVersion}",
        "org.quartz-scheduler:quartz:${quartzVersion}",
        "com.rometools:rome:${romeVersion}",
        "org.xerial:sqlite-jdbc:${sqliteJdbcVersion}",
        "net.coobird:thumbnailator:${thumbnailatorVersion}",
        "org.apache.xmlbeans:xmlbeans:${xmlbeansVersion}",
        "org.apache.tika:tika-core:${tikaVersion}",
        "cglib:cglib-nodep:${cglibNodepVersion}",
        "xerces:xercesImpl:${xercesImplVersion}",
        "org.imca_cat.pollingwatchservice:pollingwatchservice:${pollingWatchVersion}",
        "org.postgresql:postgresql:${postgresqlDriverVersion}"
]

List javax = [
        "javax.validation:validation-api:${validationApiVersion}",
        "javax.xml:jaxrpc-api:${jaxrpcVersion}",
]

configurations {
    // Exclude the bundled org.json library from com.fasterxml.jackson.datatype:jackson-datatype-json-org dependency
    // and the org.json module as well because they get in the way of our own JSON object implementations from server/api
    all*.exclude group: "org.apache.geronimo.bundles", module: "json"
    all*.exclude group: "org.json", module: "json"

    creditable {
        canBeConsumed = false
        canBeResolved = true
    }

    // this configuration and its artifact are declared because the default outgoing variant for the api
    // module (runtimeElements) does not include all the class files since the classes compiled from
    // the XSDs are produced in a separate classes directory.  The name is chosen to be the same as
    // the apiJarFile configuration that comes from the API Gradle plugin.  We need this jar file for
    // the testAutomation dependency declaration at least.
    apiJarFile {
        canBeConsumed = true
        canBeResolved = true
    }
}

// declared separately to include the gwtsrc directory
sourceSets {
  main {
    java {
      srcDirs = ["src", "gwtsrc", "$project.buildDir/xb"]
    }
    // TODO move resources files into resources directory to avoid this overlap
    resources {
      srcDirs = ['src'] // src is included because it contains some xml and text files
      exclude '**/*.java'
      exclude '**/*.jsp'
    }
  }
}


dependencies {
    // declare a transitive labkey dependency so the dependencies of the labkey-client-api are copied into api's lib directory
    // and so the dependencies are included in the dependencies.txt file.
    BuildUtils.addLabKeyDependency(project: project, config: "labkey", depProjectPath: BuildUtils.getRemoteApiProjectPath(gradle), transitive: true, depProjectConfig: "default", depVersion: project.labkeyClientApiVersion)
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getBootstrapProjectPath(gradle))
    api project.tasks.schemasCompile.outputs.files

    // always include labkey-client-api in the dependencies.txt file, whether that project is being built locally or not.
    creditable "org.labkey.api:labkey-client-api:${project.labkeyClientApiVersion}"

    BuildUtils.addTomcatBuildDependencies(project, "implementation")
    // the following two libraries are required for compilation but we don't want extra ones in the classpath, so we exclude
    // them from external dependencies in favor of the versions in the tomcat directory (FIXME seems somewhat sketchy...)
    api "javax.servlet:servlet-api:${servletApiVersion}"
    api "com.sun.mail:jakarta.mail:${javaMailVersion}"


    external("com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jacksonVersion}") {
      // exclude this because it gets in the way of our own JSON object implementations from server/api
      exclude group: "org.json", module:"json"
    }
    external ("org.apache.poi:poi-ooxml:${poiVersion}") {
        // Issue 33146: Later versions of xmlbeans introduce some encoding problems, so we exclude the transitive
        // dependency here in favor of the explicit dependency with a different version.
        exclude group: "org.apache.xmlbeans", module: "xmlbeans"
    }
    external("net.sourceforge.jexcelapi:jxl:${jxlVersion}") {
        // exclude this because it brings older version of log4j
        exclude group: "log4j", module:"log4j"
    }
    external apache,caching,charting,gwt,jackson,javax,logging,others,r,spring

    // These are required for running unit tests through the server junit controller
    external test

    jspImplementation files(project.tasks.jar)
    jspImplementation apache, jackson, spring
}

artifacts {
    apiJarFile(jar)
}
