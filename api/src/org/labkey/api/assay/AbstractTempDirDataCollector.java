/*
 * Copyright (c) 2012-2019 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.api.assay;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jetbrains.annotations.Nullable;
import org.labkey.api.assay.actions.AssayRunUploadForm;
import org.labkey.api.exp.ExperimentException;
import org.labkey.api.exp.api.ExpData;
import org.labkey.api.exp.api.ExpRun;
import org.labkey.api.query.BatchValidationException;
import org.labkey.api.util.NetworkDrive;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * User: jeckels
 * Date: 8/17/12
 */
public abstract class AbstractTempDirDataCollector<ContextType extends AssayRunUploadContext<? extends AssayProvider>> extends AbstractAssayDataCollector<ContextType>
{
    protected boolean _uploadComplete = false;
    private static final String TMPFILE = "tmp";

    private static final Logger LOG = LogManager.getLogger(AbstractTempDirDataCollector.class);

    private void removeTempDir(ContextType context) throws ExperimentException
    {
        // TODO: remove this instanceof check
        if (!(context instanceof AssayRunUploadForm))
            return;

        String uploadAttemptID = ((AssayRunUploadForm)context).getUploadAttemptID();

        // Cleanup files other than input generated by transform scripts
        File tempDir = ensureSubdirectory(context.getContainer(), TEMP_DIR_NAME);
        File uploadAttemptDir = new File(tempDir, uploadAttemptID);
        if (NetworkDrive.exists(uploadAttemptDir))
        {
            try
            {
                FileUtils.deleteDirectory(uploadAttemptDir);
            }
            catch (IOException e)
            {
                // Delete quietly
            }
        }
    }

    private void removeFiles(ContextType context, Collection<Map<String, File>> assayFiles) throws ExperimentException
    {
        for (Map<String, File> fileMap : assayFiles)
        {
            for (File file : fileMap.values())
            {
                File assayFile = new File(ensureUploadDirectory(context.getContainer(), DIR_NAME), file.getName());
                FileUtils.deleteQuietly(assayFile);
            }
        }
    }

    protected void uploadFailed(ContextType context, List<Map<String, File>> assayFiles) throws ExperimentException
    {
        removeTempDir(context);
        removeFiles(context, assayFiles);
    }

    @Override
    public void initDir(ContextType context) throws ExperimentException
    {
        // If upload files are specified
        if(!context.getUploadedData().isEmpty())
        {
            // TODO: remove this instanceof check
            if (!(context instanceof AssayRunUploadForm))
                return;

            String uploadAttemptID = ((AssayRunUploadForm)context).getUploadAttemptID();

            // Cleanup transform script output files if generated by warning feature
            File tempDir = AssayFileWriter.ensureSubdirectory(context.getContainer(), TEMP_DIR_NAME);
            File uploadAttemptDir = new File(tempDir, uploadAttemptID);
            if (NetworkDrive.exists(uploadAttemptDir))
            {
                File[] fileList = uploadAttemptDir.listFiles();
                if(null != fileList)
                {
                    for (File file : fileList)
                    {
                        boolean save = false;

                        // Loop through primary files to ensure we don't delete
                        for (Map.Entry<String,File> entry : context.getUploadedData().entrySet())
                        {
                            if (entry.getValue().equals(file) && entry.getKey().startsWith(AssayDataCollector.PRIMARY_FILE) ||
                                    entry.getValue().equals(file) && entry.getKey().startsWith(AssayDataCollector.PLATE_METADATA_FILE))
                            {
                                save = true;
                                break;
                            }
                        }

                        if(!save)
                        {
                            FileUtils.deleteQuietly(file);
                        }
                    }
                }
            }
        }
    }

    @Override
    @Nullable
    public File getRoot(@Nullable ExpRun run, @Nullable File data)
    {
        File root = null;

        if(null != run)
        {
            root = Paths.get(run.getFilePathRoot().getParentFile().getParentFile().getParent()).toFile();
        }
        else if(null != data)
        {
            // Need to get to root in root/assaydata/uploadTemp/<tempname>/file
            root = Paths.get(data.getParentFile().getParentFile().getParentFile().getParent()).toFile();
        }

        return root;
    }

    @Override
    protected File getFileTargetDir(ContextType context) throws ExperimentException
    {
        if (context instanceof AssayRunUploadForm)
        {
            File tempDir = ensureSubdirectory(context.getContainer(), TEMP_DIR_NAME);
            File uploadAttemptDir = new File(tempDir, ((AssayRunUploadForm)context).getUploadAttemptID());

            if (!NetworkDrive.exists(uploadAttemptDir))
            {
                uploadAttemptDir.mkdir();
            }
            if (!uploadAttemptDir.isDirectory())
            {
                throw new ExperimentException("Unable to create temporary assay directory " + uploadAttemptDir);
            }
            return uploadAttemptDir;
        }
        else
        {
            return super.getFileTargetDir(context);
        }
    }

    // This is the default case to get a unique file name in the assayData directory for the primary file
    @Nullable
    protected File getFilePath(ContextType context, @Nullable ExpRun run, File tempDirFile) throws ExperimentException
    {
        File assayDir = ensureUploadDirectory(context.getContainer());
        return findUniqueFileName(tempDirFile.getName(), assayDir);
    }

    // This is the default case to move the primary file from the temp directory to the assayData directory
    protected void handleTempFile(File tempDirFile, File assayDirFile) throws IOException
    {
        FileUtils.moveFile(tempDirFile, assayDirFile);
    }

    @Override
    public Map<String, File> uploadComplete(ContextType context, @Nullable ExpRun run) throws ExperimentException
    {
        Map<File, String> fileToName = new HashMap<>();
        Map<String, File> uploadedData = context.getUploadedData();
        Map<String, File> result = new HashMap<>(uploadedData);
        for (Map.Entry<String, File> entry : uploadedData.entrySet())
        {
            fileToName.put(entry.getValue(), entry.getKey());
        }

        // Copy the data files from the temp directory into the real assay directory, and fix up any references
        // to the file that are stored in the exp.data table
        try
        {
            List<? extends ExpData> allData = run == null ? Collections.emptyList() : run.getAllDataUsedByRun();
            File assayDir = ensureUploadDirectory(context.getContainer());
            File tempDir = getFileTargetDir(context);
            for (File tempDirFile : tempDir.listFiles())
            {
                File assayDirFile = getFilePath(context, run, tempDirFile);
                if(assayDirFile != null)
                {
                    String uploadName = fileToName.get(tempDirFile);
                    if (uploadName != null)
                    {
                        result.put(uploadName, assayDirFile);
                    }
                    for (ExpData expData : allData)
                    {
                        if (tempDirFile.equals(expData.getFile()))
                        {
                            expData.setDataFileURI(assayDirFile.toURI());
                            expData.save(context.getUser());
                        }
                    }
                    if (run != null)
                    {
                        // Fixup the path in the run itself so that it's not pointed at the temp directory
                        run.setFilePathRoot(assayDir);

                        // If the run name is the filename, and the filename was changed to another unique value, change the run name.
                        if (run.getName().equals(tempDirFile.getName()))
                        {
                            run.setName(getPreferredAssayId(assayDirFile));
                        }

                        run.save(context.getUser());
                    }
                    handleTempFile(tempDirFile, assayDirFile);
                }
                else
                {
                    LOG.warn("Unable to resolve import/upload file location for file: " + tempDirFile);
                }
            }
            FileUtils.deleteDirectory(tempDir);
        }
        catch (IOException | BatchValidationException e)
        {
            throw new ExperimentException(e);
        }
        _uploadComplete = true;

        return result;
    }

    /** @return the preferred name for the run given the primary data file */
    protected String getPreferredAssayId(File primaryFile)
    {
        return primaryFile.getName();
    }

    @Override
    public boolean isVisible()
    {
        return true;
    }
}
