package org.labkey.api.data;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class SimpleStatementWrapper implements Statement
{
    protected final SimpleConnectionWrapper _conn;
    protected final Statement _statement;

    public SimpleStatementWrapper(SimpleConnectionWrapper conn, Statement statement)
    {
        _conn = conn;
        _statement = statement;
    }

    // This method is the sole reason for this wrapper -- need to return the SimpleConnectionWrapper here instead of the
    // underlying Connection
    @Override
    public Connection getConnection()
    {
        return _conn;
    }

    // Every method below here simply delegates to the raw Statement

    @Override
    public ResultSet executeQuery(String sql) throws SQLException
    {
        return _statement.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException
    {
        return _statement.executeUpdate(sql);
    }

    @Override
    public void close() throws SQLException
    {
        _statement.close();
    }

    @Override
    public int getMaxFieldSize() throws SQLException
    {
        return _statement.getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException
    {
        _statement.setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException
    {
        return _statement.getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException
    {
        _statement.setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException
    {
        _statement.setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException
    {
        return _statement.getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException
    {
        _statement.setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException
    {
        _statement.cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException
    {
        return _statement.getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException
    {
        _statement.clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException
    {
        _statement.setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException
    {
        return _statement.execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException
    {
        return _statement.getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException
    {
        return _statement.getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException
    {
        return _statement.getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException
    {
        _statement.setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException
    {
        return _statement.getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException
    {
        _statement.setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException
    {
        return _statement.getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException
    {
        return _statement.getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException
    {
        return _statement.getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException
    {
        _statement.addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException
    {
        _statement.clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException
    {
        return _statement.executeBatch();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException
    {
        return _statement.getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException
    {
        return _statement.getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        return _statement.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        return _statement.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException
    {
        return _statement.executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
    {
        return _statement.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException
    {
        return _statement.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException
    {
        return _statement.execute(sql, columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException
    {
        return _statement.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException
    {
        return _statement.isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException
    {
        _statement.setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException
    {
        return _statement.isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException
    {
        _statement.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException
    {
        return _statement.isCloseOnCompletion();
    }

    @Override
    public long getLargeUpdateCount() throws SQLException
    {
        return _statement.getLargeUpdateCount();
    }

    @Override
    public void setLargeMaxRows(long max) throws SQLException
    {
        _statement.setLargeMaxRows(max);
    }

    @Override
    public long getLargeMaxRows() throws SQLException
    {
        return _statement.getLargeMaxRows();
    }

    @Override
    public long[] executeLargeBatch() throws SQLException
    {
        return _statement.executeLargeBatch();
    }

    @Override
    public long executeLargeUpdate(String sql) throws SQLException
    {
        return _statement.executeLargeUpdate(sql);
    }

    @Override
    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException
    {
        return _statement.executeLargeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException
    {
        return _statement.executeLargeUpdate(sql, columnIndexes);
    }

    @Override
    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException
    {
        return _statement.executeLargeUpdate(sql, columnNames);
    }

    @Override
    public String enquoteLiteral(String val) throws SQLException
    {
        return _statement.enquoteLiteral(val);
    }

    @Override
    public String enquoteIdentifier(String identifier, boolean alwaysQuote) throws SQLException
    {
        return _statement.enquoteIdentifier(identifier, alwaysQuote);
    }

    @Override
    public boolean isSimpleIdentifier(String identifier) throws SQLException
    {
        return _statement.isSimpleIdentifier(identifier);
    }

    @Override
    public String enquoteNCharLiteral(String val) throws SQLException
    {
        return _statement.enquoteNCharLiteral(val);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException
    {
        return _statement.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return _statement.isWrapperFor(iface);
    }
}
