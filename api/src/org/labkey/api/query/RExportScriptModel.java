/*
 * Copyright (c) 2010-2019 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.labkey.api.query;

import org.apache.commons.lang3.StringUtils;
import org.labkey.api.data.CompareType;
import org.labkey.api.util.HelpTopic;
import org.labkey.api.view.ActionURL;

import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.defaultIfBlank;
import static org.apache.commons.lang3.StringUtils.startsWith;
import static org.apache.commons.lang3.StringUtils.trimToNull;

public class RExportScriptModel extends ExportScriptModel
{
    private static final String DEFAULT_VARIABLE_NAME = "labkey.data";

    protected final String variableName;
    protected final boolean clean;
    protected final String view;

    public RExportScriptModel(QueryView view)
    {
        this(view, DEFAULT_VARIABLE_NAME);
    }

    protected RExportScriptModel(QueryView view, String defaultVariableName)
    {
        super(view);

        // CONSIDER: is there a better way to pass through custom parameters??? (RExportScriptModel constructor?)
        ActionURL url = getQueryView().getSettings().getSortFilterURL();
        String v = defaultIfBlank(url.getParameter("r~variable"), defaultVariableName);
        if (!islegal(v))
        {
            v = v.replaceAll("[^\\p{Alnum}\\._]","_");
            if (!islegal(v))
                v = "`" + v + "`";
        }
        this.variableName = v;
        this.clean = "1".equals(url.getParameter("r~clean"));
        this.view = trimToNull(url.getParameter("r~view"));
    }

    private boolean islegal(String v)
    {
        if (!Pattern.matches("[\\p{Alnum}\\._]+",v) || Pattern.matches("^\\.\\p{Digit}.*",v))
            return false;
        if (startsWith(v,"."))
            return false;
        if (Arrays.asList("TRUE","FALSE","NULL","Inf","NaN","NA","NA_integer_","NA_real_","NA_complex_","NA_character_").contains(v))
            return false;
        return true;
    }

    @Override
    public String getViewName()
    {
        return StringUtils.trimToEmpty(super.getViewName());
    }

    @Override
    public String getFilters()
    {
        return getFilters("NULL", "makeFilter(", "", ",", ")");
    }

    @Override
    protected String quote(String value)
    {
        return doubleQuote(value);
    }

    @Override
    protected String makeFilterExpression(String name, CompareType operator, String value)
    {
        return "c(" + quote(name) + ", " + quote(operator.getScriptName()) + ", " + quote(value) + ")";
    }

    private String getContainerFilterString()
    {
        return hasContainerFilter() ? (" " + quote(getContainerFilterTypeName()) + " ") : "NULL";
    }

    @Override
    public String getScriptExportText()
    {
        StringBuilder sb = new StringBuilder();

        if (!clean)
        {
            sb.append("## R Script generated by ").append(getInstallationName()).append(" on ").append(getCreatedOn()).append("\n");
            sb.append("#").append("\n");
            sb.append("# This script makes use of the LabKey Remote API for R package (Rlabkey), which can be obtained via CRAN").append("\n");
            sb.append("# using the package name \"Rlabkey\". The Rlabkey package also depends on the \"httr\" and \"jsonlite\" packages.").append("\n");
            sb.append("#").append("\n");
            sb.append("# See ").append(new HelpTopic("rAPI").getHelpTopicHref(HelpTopic.Referrer.script)).append(" for more information.").append("\n");
            sb.append("\n");
            sb.append("library(Rlabkey)").append("\n");
            sb.append("\n");
            sb.append("# Select rows into a data frame called '").append(variableName).append("'").append("\n");
            sb.append("\n");
        }
        String nl = "\n"; //clean ? "" : "\n";
        String indent = "    "; //clean ? StringUtils.repeat(" ", 4) : "";
        sb.append(variableName).append(" <- labkey.selectRows(").append(nl);
        sb.append(indent).append("baseUrl=").append(quote(getBaseUrl())).append(", ").append(nl);
        sb.append(indent).append("folderPath=").append(quote(getFolderPath())).append(", ").append(nl);
        sb.append(indent).append("schemaName=").append(quote(getSchemaName())).append(", ").append(nl);
        sb.append(indent).append("queryName=").append(quote(getQueryName())).append(", ").append(nl);
        sb.append(indent).append("viewName=").append(quote(getViewName())).append(", ").append(nl);
        sb.append(indent).append("colSelect=").append(quote(getColumns())).append(", ").append(nl);

        if (hasSort())
            sb.append(indent).append("colSort=").append(quote(getSort())).append(", ").append(nl);
        sb.append(indent).append("colFilter=").append(getFilters()).append(", ").append(nl);
        sb.append(indent).append("containerFilter=").append(getContainerFilterString()).append(", ").append(nl);
        sb.append(indent).append("colNameOpt=").append(quote("rname"));

        if (hasQueryParameters())
        {
            sb.append(",").append(nl);
            sb.append(indent).append("parameters=c(");
            sb.append(getQueryParameters().entrySet().stream()
                .map(entry -> quote(entry.getKey() + "=" + entry.getValue()))
                .collect(Collectors.joining(",")));
            sb.append(")");
        }

        sb.append(nl).append(")\n");

        if ("rstudio".equals(view))
            sb.append("\nsprintf(\"").append(variableName).append(" has %d row(s)\", nrow(").append(variableName).append("))");
        if ("r".equals(view))
            sb.append(variableName).append("\n");

        return sb.toString();
    }
}
